// MONGOOSE: Connection configuration to MongoDB database via Mongoose library
const mongoose = require('mongoose');

// MONGOOSE: Creates a new Mongoose schema
const Schema = mongoose.Schema;

// MONGOOSE: Keys define a property in each document in the collection, including nested objects
const serviceSchema = new Schema({
  id: Number,
  Name: String,
  Description: String,
  ReferralInfo: String,
  ADHCEligible: Boolean,
  AssessmentCriteria: String,
  TargetGender: String,
  Availability: String,
  BillingMethod: String,
  Cost: String,
  CrisisKeywords: String,
  Details: String,
  EligibilityInfo: String,
  IneligibilityInfo: String,
  FundingBody: String,
  HealthcareCardHolders: Boolean,
  IntakeInfo: String,
  IntakePoint: String,
  IsBulkBilling: Boolean,
  NDISApproved: Boolean,
  PromotedService: Boolean,
  SpecialRequirements: String,
  Language: String,
  AgeGroupKeyword: String,
  AgeGroupDescription: String,
  ServiceTypes: String,
  IndigenousClassification: String,
  CapacityStatus: String,
  CapacityStatusText: String,
  CapacityFrequency: String,
  CapacityLastNotification: String,
  CapacityLastStatusUpdate: String,
  CapacityExpireDate: String,
  AccreditationName: String,
});

const openingHoursSchema = new Schema({
  day:String,
  openTime:String,
  closeTime:String,
  openingHoursNote: String,
})

const siteSchema = new Schema({
 id: Number,
 Name: String,
 Accessibility: String,
 LocationDetails: String,
 ParkingInfo: String,
 PublicTransportInfo: String,
 IsMobile: Boolean,
 EmailAddress: String,
 EmailIsConfidential: String,
 Website: String,
 PostalAddress: String,
 PostalAddressState: String,
 PostalAddressSuburb: String,
 PostalAddressPostcode: String,
 PostalAddressIsConfidential: Boolean,
 PhoneNumber: String,
 PhoneKind: String,
 PhoneIsConfidential: Boolean,
 OpeningHours: [openingHoursSchema],
 AddressBuilding: String,
 AddressLevel: String,
 AddressFlatUnit: String,
 AddressStreetNumber: String,
 AddressStreetName: String,
 AddressStreetType: String,
 AddressStreetSuffix: String,
 AddressSuburb: String,
 AddressState: String,
 AddressPostcode: String,
 AddressIsConfidential: Boolean,
 servicesInSite: [serviceSchema],
});

const organisationSchema = new Schema({
  id: Number,
  Name: String,
  Description: String,
  CreationTime: Date,
  LastModified: Date,
  LastUpdated: Date,
  Website: String,
  ABN: String,
  ProviderType: String,
  AlsoKnownAs: String,
  EmailAddress: String,
  EmailIsConfidential: Boolean,
  PostalAddress: String,
  PostalAddressState: String,
  PostalAddressSuburb: String,
  PostalAddressPostcode: String,
  PostalAddressIsConfidential: Boolean,
  PhoneNumber: String,
  PhoneKind: String,
  PhoneIsConfidential: Boolean,
  CEO: String,
  sitesInOrganisation: [siteSchema],
});

// MONGOOSE: To use schema definition, organisationSchema needs to be converted into a Model - by passing into mongoose.model(modelName, schema):
module.exports = mongoose.model('Organisation', organisationSchema);